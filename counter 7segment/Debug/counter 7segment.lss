
counter 7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000106  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000048d  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a7  00000000  00000000  00000689  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000202  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a4  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001be  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b1  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000e47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  7a:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_data>:
	_delay_us(100);
}

void LCD_data(unsigned char data)
{
	LCD_PRT = data & (0xF0);				//write the high nibble to D4 to D7
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	95 bb       	out	0x15, r25	; 21
	LCD_CPRT |=(1<<LCD_RS);	                //RS = 1 for data
  88:	a8 9a       	sbi	0x15, 0	; 21
	LCD_CPRT &=~(1<<LCD_RW);			    //RW = 0 for write
  8a:	a9 98       	cbi	0x15, 1	; 21
	LCD_CPRT |=(1<<LCD_EN);					//high to low pulse
  8c:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &=~(1<<LCD_EN);
  90:	aa 98       	cbi	0x15, 2	; 21
	
	LCD_PRT = (data<<4);					//shift to write the low nibble
  92:	82 95       	swap	r24
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	85 bb       	out	0x15, r24	; 21
	LCD_CPRT |=(1<<LCD_EN);				    //high to low pulse
  98:	aa 9a       	sbi	0x15, 2	; 21
  9a:	00 00       	nop
	_delay_us(1);
	LCD_CPRT &=~(1<<LCD_EN);
  9c:	aa 98       	cbi	0x15, 2	; 21
  9e:	81 e2       	ldi	r24, 0x21	; 33
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_data+0x1e>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <main>:
void LCD_gotoxy(unsigned char x,unsigned char y);
void LCD_print(char * str);

int main(void)

{    DDRB&=~ (1<<0);//port B bin 1 input
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	2a 97       	sbiw	r28, 0x0a	; 10
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
  bc:	b8 98       	cbi	0x17, 0	; 23
	 PORTB|=(1<<0);//pull up
  be:	c0 9a       	sbi	0x18, 0	; 24
	 DDRA=0xff;    //port A output
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
     TCCR0|=(1<<3);//ctc
  c4:	83 b7       	in	r24, 0x33	; 51
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	83 bf       	out	0x33, r24	; 51
	 //TCCR0|=(1<<6);//normal mode
	 TCCR0|=(6<<0);//external clk falling
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	86 60       	ori	r24, 0x06	; 6
  ce:	83 bf       	out	0x33, r24	; 51
	 OCR0=9;
  d0:	89 e0       	ldi	r24, 0x09	; 9
  d2:	8c bf       	out	0x3c, r24	; 60
	 //ADCH=TCNT0;
	 unsigned char table[]={0b11000000,0b11111001,0b10100100,0b10110000,0b10011001,0b10010010,0b10000011,0b11111000,0b10000000,0b10011000};
  d4:	8a e0       	ldi	r24, 0x0A	; 10
  d6:	e0 e6       	ldi	r30, 0x60	; 96
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	de 01       	movw	r26, r28
  dc:	11 96       	adiw	r26, 0x01	; 1
  de:	01 90       	ld	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	8a 95       	dec	r24
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x36>
    while(1)
    {   int x=TCNT0;
  e6:	12 b7       	in	r17, 0x32	; 50
		LCD_data(x+'0');
  e8:	80 e3       	ldi	r24, 0x30	; 48
  ea:	81 0f       	add	r24, r17
  ec:	0e 94 41 00 	call	0x82	; 0x82 <LCD_data>
		PORTA=table[x];
  f0:	e1 e0       	ldi	r30, 0x01	; 1
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	ec 0f       	add	r30, r28
  f6:	fd 1f       	adc	r31, r29
  f8:	e1 0f       	add	r30, r17
  fa:	f1 1d       	adc	r31, r1
  fc:	80 81       	ld	r24, Z
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	f2 cf       	rjmp	.-28     	; 0xe6 <main+0x3e>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
